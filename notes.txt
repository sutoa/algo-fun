1. find sqrt
    a. log solution ans = pow(10, log10(num)/2); this is not a perfect solution; for num = 808201, it does not work due to decimal number
    b. binary search; left, right and everything declared as long; otherwise the product can be negative even if it's declared as long but mid is int
2. remove K digits to get the smallest number
    a. remove digit if it's greater than the digit to the right
    b. pollLast of Deque returns the beginning of the list; Also, pollLast is slow; use poll and reverse at the end when converting from stack to string
3. circular array max sum
    a. when max straddles the circular edge, then it's like removing the min chunk from the total sum of the array. this is not the case when the max does not cross over because taking out a chunk in the middle would break the string
4. odd/even linkedlist  (5/19/20)
    a. maintain 2 pointers; one for where to insert; one for what to take out
    b. the pointers should be pointing at BEFORE the insert and remove positions due to one dimension
5. stock span (5/20)
    a. we can folder previous spans as long as they are smaller because we don't need the break down to calculate the next number
    b. for foldering/collapsing items, Deque is the structure to use
6. kth element in bst
    a. use stack to traverse tree inorder so we can count along the way if it's kth
7. ransom note
    a. if it's all lower cases, just use array of 26 instead of map, more time consuming
8. count squares occupied with 1's
    a. for each element, count the longest edge and then keep adding. same as problem to find the biggest square
9. Trie for String match and startWith
    a. use tree structure to represent words, one char per level
10. interval list interception
    a. find overlap is always maxStart to minEnd unless no overlap at all, in which case, end>start
    b. advance the side where the end is before the other, because there could be another one right after this one that also has overlap
    c. use List<int[]> and toArray is faster than map and convert to array
11. split people to 2 groups
    a. why adding one direction gave false while should be true?

12. mark region sounded by X (June)
    a. start from the 4 edges of the board to mark because we can make the decision, mark as P,
    we go all the way to the edge and then back paddle
13. is number power of 2 (June)
    a. use bit-wise and of x and x-1, result has to be 0
14. h index of citation
    a. citation is the number of remaining element in the SORTED array, current ele included, where the ele value is greater than or equal to the remain size
    b. binary searh's general for is as follows
    while(left<=right){
        mid = left + (right-left)/2;
        if(some condition that says answer is to the left){
            right=mid-1;
            // IMPORTANT may need to capture the potential answer if the current position might ALREADY by the answer so that when you break out of the loop, the right answer is in ans
            ans = ...;
        } else {
            left = mid+1;
        }
    }
15. find Dup string
    a. Rabin Karp algorithm
    b. Use LONG for everything because the power of 26 is very high when you have a string of 1600 chars
    c. it made a different how the hash is calculated. when i left the power grow from left to right, then the next hash became 0 eventually when 800 chars. So false true thinking there's a dup
    when i let the power DECREASE from left to right, then the hashes didn't collide even though there was also a numeric overflow of the multiplier. 26 to the power of 799 became 0